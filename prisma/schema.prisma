generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  firstName        String
  lastName         String
  role             String
  photoUrl         String?
  // Relation fields
  courses_enrolled CourseEnrollment[]
  course           Course?            @relation("CreatedCourse")
  matno            String?
  password         String?
  Answer           Answer[]
}

model Course {
  id          Int                @id @default(autoincrement())
  title       String
  details     String?
  createdAt   DateTime           @default(now())
  // Relation fields
  createdBy   Int                @unique
  creator     User               @relation(name: "CreatedCourse", fields: [createdBy], references: [id])
  members     CourseEnrollment[]
  exams       Exam[]
  tests       Test[]
  assignments Assignment[]
  materials   LectureMaterial[]
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      String
  // Relation Fields
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  // Relation Fields
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
}

model Test {
  id           Int      @id @default(autoincrement())
  title        String
  quizId       String
  instructions String?
  createdAt    DateTime @default(now())
  // Relation Fields
  courseId     Int
  course       Course   @relation(fields: [courseId], references: [id])
}

model Assignment {
  id           Int      @id @default(autoincrement())
  title        String
  instructions String?
  url          String?
  upload       String?
  createdAt    DateTime @default(now())
  // Relation Fields
  courseId     Int
  course       Course   @relation(fields: [courseId], references: [id])
  answers      Answer[] @relation("AssignmentAnswers") // New relation field for answers
}

model Answer {
  id           Int        @id @default(autoincrement())
  content      String
  createdAt    DateTime   @default(now())
  // Relation Fields
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(name: "AssignmentAnswers", fields: [assignmentId], references: [id])
}

model LectureMaterial {
  id           Int      @id @default(autoincrement())
  title        String
  instructions String?
  url          String?
  upload       String?
  createdAt    DateTime @default(now())
  // Relation Fields
  courseId     Int
  course       Course   @relation(fields: [courseId], references: [id])
}
